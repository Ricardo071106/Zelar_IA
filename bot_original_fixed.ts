import { Telegraf } from 'telegraf';

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN n√£o encontrado');
  process.exit(1);
}

console.log('ü§ñ Iniciando bot original Zelar...');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Estado dos usu√°rios
const userStates = new Map();

// Fun√ß√£o para calcular pr√≥ximo dia da semana
function getNextWeekday(date: Date, targetDay: number): Date {
  const result = new Date(date);
  const daysUntilTarget = (targetDay - date.getDay() + 7) % 7;
  if (daysUntilTarget === 0) {
    result.setDate(date.getDate() + 7);
  } else {
    result.setDate(date.getDate() + daysUntilTarget);
  }
  return result;
}

// Fun√ß√£o para processar mensagens de evento
function parseMessage(text: string) {
  const now = new Date();
  let eventDate = new Date(now);
  let title = text;
  let time = '09:00';

  // Extrair hor√°rio
  const timeMatch = text.match(/(\d{1,2}):?(\d{0,2})\s*h?/);
  if (timeMatch) {
    const hour = timeMatch[1];
    const minute = timeMatch[2] || '00';
    time = `${hour.padStart(2, '0')}:${minute.padStart(2, '0')}`;
  }

  // Processar datas relativas
  if (text.includes('amanh√£')) {
    eventDate.setDate(now.getDate() + 1);
  } else if (text.includes('hoje')) {
    eventDate = new Date(now);
  } else if (text.includes('segunda')) {
    eventDate = getNextWeekday(now, 1);
  } else if (text.includes('ter√ßa')) {
    eventDate = getNextWeekday(now, 2);
  } else if (text.includes('quarta')) {
    eventDate = getNextWeekday(now, 3);
  } else if (text.includes('quinta')) {
    eventDate = getNextWeekday(now, 4);
  } else if (text.includes('sexta')) {
    eventDate = getNextWeekday(now, 5);
  } else if (text.includes('s√°bado')) {
    eventDate = getNextWeekday(now, 6);
  } else if (text.includes('domingo')) {
    eventDate = getNextWeekday(now, 0);
  }

  // Definir hor√°rio
  const [hour, minute] = time.split(':');
  eventDate.setHours(parseInt(hour), parseInt(minute), 0, 0);

  // Limpar t√≠tulo
  title = text
    .replace(/(\d{1,2}):?(\d{0,2})\s*h?/, '')
    .replace(/\b(amanh√£|hoje|segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo)\b/g, '')
    .replace(/\s+/g, ' ')
    .trim();

  return {
    title: title || 'Evento',
    startDate: eventDate,
    endDate: new Date(eventDate.getTime() + 60 * 60 * 1000) // +1 hora
  };
}

// Fun√ß√£o para gerar links de calend√°rio
function generateCalendarLinks(event: any) {
  const formatDateForGoogle = (date: Date): string => {
    return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };

  const startDate = formatDateForGoogle(event.startDate);
  const endDate = formatDateForGoogle(event.endDate);
  
  const googleLink = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${startDate}/${endDate}`;
  
  const outlookLink = `https://outlook.live.com/calendar/0/deeplink/compose?subject=${encodeURIComponent(event.title)}&startdt=${event.startDate.toISOString()}&enddt=${event.endDate.toISOString()}`;

  return { googleLink, outlookLink };
}

// Comando /start
bot.start((ctx) => {
  const userId = ctx.from.id.toString();
  userStates.set(userId, { events: [] });
  
  ctx.reply(`ü§ñ *Zelar - Assistente de Agendamento*

Ol√°! Sou seu assistente pessoal para agendamentos.

üìÖ *Como usar:*
‚Ä¢ Digite naturalmente: "reuni√£o amanh√£ √†s 15h"
‚Ä¢ Use /eventos para ver seus compromissos
‚Ä¢ Use /help para mais comandos

‚ú® Funciono em portugu√™s brasileiro!`, 
    { parse_mode: 'Markdown' });
});

// Comando /help
bot.help((ctx) => {
  ctx.reply(`üìã *Comandos dispon√≠veis:*

/start - Iniciar conversa
/eventos - Ver meus compromissos
/help - Esta ajuda

üí° *Exemplos de uso:*
‚Ä¢ "reuni√£o com Jo√£o amanh√£ √†s 14h"
‚Ä¢ "dentista na pr√≥xima segunda √†s 10h"
‚Ä¢ "almo√ßo hoje √†s 12h30"

Para cancelar, responda com "cancelar [n√∫mero]"`, 
    { parse_mode: 'Markdown' });
});

// Comando /eventos
bot.command('eventos', (ctx) => {
  const userId = ctx.from.id.toString();
  const userState = userStates.get(userId) || { events: [] };
  
  if (userState.events.length === 0) {
    ctx.reply('üìÖ Voc√™ n√£o tem eventos agendados.');
    return;
  }

  let message = 'üìÖ *Seus eventos:*\n\n';
  userState.events.forEach((event, index) => {
    const date = new Date(event.startDate).toLocaleDateString('pt-BR');
    const time = new Date(event.startDate).toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    message += `${index + 1}. ${event.title}\nüìÖ ${date} √†s ${time}\n\n`;
  });

  message += 'Para cancelar, digite: cancelar [n√∫mero]';
  
  ctx.reply(message, { parse_mode: 'Markdown' });
});

// Processar mensagens de texto
bot.on('text', (ctx) => {
  const text = ctx.message.text.toLowerCase();
  const userId = ctx.from.id.toString();
  
  // Inicializar estado do usu√°rio se necess√°rio
  if (!userStates.has(userId)) {
    userStates.set(userId, { events: [] });
  }
  
  const userState = userStates.get(userId);

  // Processar cancelamentos
  if (text.includes('cancelar')) {
    const numberMatch = text.match(/cancelar\s+(\d+)/);
    if (numberMatch) {
      const eventIndex = parseInt(numberMatch[1]) - 1;
      if (eventIndex >= 0 && eventIndex < userState.events.length) {
        const cancelledEvent = userState.events.splice(eventIndex, 1)[0];
        ctx.reply(`‚úÖ Evento "${cancelledEvent.title}" cancelado com sucesso!`);
        return;
      }
    }
    ctx.reply('‚ùå N√∫mero do evento inv√°lido. Use /eventos para ver a lista.');
    return;
  }

  // Processar novos eventos
  try {
    const event = parseMessage(ctx.message.text);
    userState.events.push(event);
    
    const { googleLink, outlookLink } = generateCalendarLinks(event);
    
    const formatDate = (date: Date): string => {
      return date.toLocaleDateString('pt-BR', { 
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };

    ctx.reply(`‚úÖ *Evento criado com sucesso!*

üìã *Detalhes:*
üéØ ${event.title}
üìÖ ${formatDate(event.startDate)}

üì± *Adicionar ao calend√°rio:*`, 
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÖ Google Calendar', url: googleLink },
              { text: 'üìÖ Outlook', url: outlookLink }
            ]
          ]
        }
      });
      
  } catch (error) {
    console.error('Erro ao processar evento:', error);
    ctx.reply('‚ùå N√£o consegui entender sua mensagem. Tente algo como: "reuni√£o amanh√£ √†s 15h"');
  }
});

// Configurar graceful shutdown para evitar m√∫ltiplas inst√¢ncias
process.once('SIGINT', () => {
  console.log('üõë Parando bot...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('üõë Parando bot...');
  bot.stop('SIGTERM');
});

// Iniciar bot
bot.launch()
  .then(() => {
    console.log('‚úÖ Bot original funcionando em @zelar_assistente_bot');
    console.log('üìã Use /start para come√ßar');
  })
  .catch((error) => {
    if (error.message.includes('409')) {
      console.log('‚ö†Ô∏è Outra inst√¢ncia do bot est√° rodando. Aguarde alguns segundos e tente novamente.');
    } else {
      console.error('‚ùå Erro ao iniciar bot:', error.message);
    }
    process.exit(1);
  });