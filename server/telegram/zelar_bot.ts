/**
 * Bot Zelar - Vers√£o avan√ßada com interpreta√ß√£o inteligente de datas
 * Processamento avan√ßado de eventos em portugu√™s usando Luxon
 */

import { Telegraf } from 'telegraf';
import { parseBrazilianDateTime } from '../utils/dateParser';

let bot: Telegraf | null = null;

interface Event {
  title: string;
  startDate: string; // ISO string for Google Calendar
  description: string;
  displayDate: string; // Formatted date for display
}

/**
 * Extrai t√≠tulo inteligente do evento
 */
function extractEventTitle(text: string): string {
  const textLower = text.toLowerCase();
  
  // Tipos espec√≠ficos de eventos
  if (textLower.includes('jantar')) return 'Jantar';
  if (textLower.includes('reuni√£o') || textLower.includes('reuniao')) return 'Reuni√£o';
  if (textLower.includes('compromisso')) return 'Compromisso';
  if (textLower.includes('consulta')) return 'Consulta';
  if (textLower.includes('exame')) return 'Exame';
  if (textLower.includes('almo√ßo') || textLower.includes('almoco')) return 'Almo√ßo';
  if (textLower.includes('dentista')) return 'Dentista';
  if (textLower.includes('m√©dico') || textLower.includes('medico')) return 'Consulta M√©dica';
  if (textLower.includes('academia')) return 'Academia';
  if (textLower.includes('trabalho')) return 'Trabalho';
  if (textLower.includes('escola') || textLower.includes('aula')) return 'Aula';
  if (textLower.includes('festa')) return 'Festa';
  if (textLower.includes('anivers√°rio') || textLower.includes('aniversario')) return 'Anivers√°rio';
  
  // Extrair t√≠tulo mais inteligente removendo palavras de tempo
  let title = text
    .replace(/\b(amanh√£|amanha|hoje|ontem)\b/gi, '')
    .replace(/\b(segunda|ter√ßa|terca|quarta|quinta|sexta|s√°bado|sabado|domingo)(-feira)?\b/gi, '')
    .replace(/\b(pr√≥xima|proxima|que vem)\b/gi, '')
    .replace(/\b√†s?\s+\d{1,2}(:\d{2})?h?\b/gi, '')
    .replace(/\b\d{1,2}(am|pm)\b/gi, '')
    .replace(/\b(da manh√£|da manha|da tarde|da noite|de manh√£|de manha|de tarde|de noite)\b/gi, '')
    .replace(/\s+/g, ' ')
    .trim();
    
  // Capitalizar primeira letra
  if (title) {
    title = title.charAt(0).toUpperCase() + title.slice(1);
  }
    
  return title || 'Evento';
}

/**
 * Processa mensagem usando interpreta√ß√£o avan√ßada de datas
 */
function processMessage(text: string): Event | null {
  console.log(`üîç Processando com IA: "${text}"`);
  
  // Usar nossa fun√ß√£o avan√ßada de interpreta√ß√£o de datas
  const result = parseBrazilianDateTime(text);
  
  if (!result) {
    console.log('‚ùå N√£o foi poss√≠vel interpretar data/hora');
    return null;
  }
  
  const title = extractEventTitle(text);
  
  console.log(`üìù T√≠tulo extra√≠do: "${title}"`);
  console.log(`üìÖ Data interpretada: ${result.readable}`);
  
  return {
    title,
    startDate: result.iso,
    description: text,
    displayDate: result.readable
  };
}

/**
 * Gera links para calend√°rios usando data ISO
 */
function generateLinks(event: Event) {
  const eventDate = new Date(event.startDate);
  const start = eventDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  const end = new Date(eventDate.getTime() + 60 * 60 * 1000).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  
  const google = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${start}/${end}`;
  const outlook = `https://outlook.live.com/calendar/0/deeplink/compose?subject=${encodeURIComponent(event.title)}&startdt=${eventDate.toISOString()}&enddt=${new Date(eventDate.getTime() + 60 * 60 * 1000).toISOString()}`;
  
  return { google, outlook };
}

/**
 * Iniciar bot
 */
export async function startZelarBot(): Promise<boolean> {
  try {
    if (bot) {
      try {
        await bot.stop();
        bot = null;
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (e) {
        console.log('Bot j√° parado');
      }
    }

    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN n√£o encontrado');
    }

    bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

    // Comando inicial
    bot.start((ctx) => {
      ctx.reply(
        'ü§ñ *Zelar - Assistente Inteligente de Agendamentos*\n\n' +
        'Ol√°! Sou seu assistente para criar eventos com interpreta√ß√£o avan√ßada de datas!\n\n' +
        'üìù *Exemplos que entendo:*\n' +
        '‚Ä¢ "jantar hoje √†s 19h"\n' +
        '‚Ä¢ "reuni√£o quarta √†s sete da noite"\n' +
        '‚Ä¢ "consulta sexta que vem √†s 15h30"\n' +
        '‚Ä¢ "dentista pr√≥xima segunda √†s 10 da manh√£"\n\n' +
        'üß† Agora entendo datas em portugu√™s natural! Digite seu compromisso! üöÄ',
        { parse_mode: 'Markdown' }
      );
    });

    // Comando de teste para interpreta√ß√£o de datas
    bot.command('interpretar', async (ctx) => {
      const message = ctx.message.text.replace('/interpretar', '').trim();
      
      if (!message) {
        await ctx.reply(
          'üí° *Como usar:*\n\n' +
          '`/interpretar quarta √†s sete da noite`\n' +
          '`/interpretar sexta que vem √†s 19h`\n' +
          '`/interpretar amanh√£ √†s 9`\n\n' +
          'Digite qualquer data/hora em portugu√™s!',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      const result = parseBrazilianDateTime(message);
      
      if (result) {
        await ctx.reply(
          `‚úÖ *Entendi perfeitamente!*\n\n` +
          `üìù *Voc√™ disse:* "${message}"\n\n` +
          `üìÖ *Interpretei como:*\n${result.readable}`,
          { parse_mode: 'Markdown' }
        );
      } else {
        await ctx.reply(
          `‚ùå *N√£o consegui entender essa data/hora*\n\n` +
          `üìù *Voc√™ disse:* "${message}"\n\n` +
          `üí° *Tente algo como:*\n` +
          `‚Ä¢ "hoje √†s 15h"\n` +
          `‚Ä¢ "segunda que vem √†s 9 da manh√£"\n` +
          `‚Ä¢ "sexta √†s sete da noite"`
        );
      }
    });

    // Processar mensagens
    bot.on('text', async (ctx) => {
      try {
        const message = ctx.message.text;
        
        if (message.startsWith('/')) return;
        
        const event = processMessage(message);
        
        if (!event) {
          await ctx.reply(
            '‚ùå *N√£o consegui entender a data/hora*\n\n' +
            'üí° *Tente algo como:*\n' +
            '‚Ä¢ "jantar hoje √†s 19h"\n' +
            '‚Ä¢ "reuni√£o quarta √†s 15h"\n' +
            '‚Ä¢ "consulta sexta que vem √†s 10 da manh√£"\n\n' +
            'üîç Use `/interpretar sua frase` para testar!',
            { parse_mode: 'Markdown' }
          );
          return;
        }
        
        const links = generateLinks(event);

        await ctx.reply(
          '‚úÖ *Evento criado com sucesso!*\n\n' +
          `üéØ *${event.title}*\n` +
          `üìÖ ${event.displayDate}\n\n` +
          'üìÖ *Adicionar ao calend√°rio:*',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìÖ Google Calendar', url: links.google },
                  { text: 'üìÖ Outlook', url: links.outlook }
                ]
              ]
            }
          }
        );

      } catch (error) {
        console.error('Erro:', error);
        await ctx.reply(
          '‚ùå *Erro ao processar sua mensagem*\n\n' +
          'üí° *Tente novamente com:*\n' +
          '‚Ä¢ "jantar hoje √†s 19h"\n' +
          '‚Ä¢ "reuni√£o amanh√£ √†s 15h"\n\n' +
          'Ou use `/interpretar sua frase` para testar!'
        );
      }
    });

    await bot.launch();
    console.log('‚úÖ Bot Zelar ativo!');
    return true;

  } catch (error) {
    console.error('‚ùå Erro ao iniciar bot:', error);
    return false;
  }
}

export function stopZelarBot(): void {
  if (bot) {
    bot.stop();
    bot = null;
  }
}