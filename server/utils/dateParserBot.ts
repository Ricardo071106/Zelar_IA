import { Telegraf, Context } from 'telegraf';
import { parseBrazilianDateTime, formatBrazilianDateTime } from './dateParser';

/**
 * Bot de exemplo para demonstrar o uso da fun√ß√£o de interpreta√ß√£o de datas
 */
export function createDateParserBot(token: string): Telegraf {
  const bot = new Telegraf(token);

  // Comando /interpretar - interpreta data/hora de uma mensagem
  bot.command('interpretar', async (ctx: Context) => {
    try {
      // Extrair o texto ap√≥s o comando
      const message = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
      const userInput = message.replace('/interpretar', '').trim();
      
      if (!userInput) {
        await ctx.reply(
          'üìÖ *Como usar:*\n\n' +
          '`/interpretar quarta √†s sete da noite`\n' +
          '`/interpretar sexta que vem √†s 19h`\n' +
          '`/interpretar amanh√£ √†s 9`\n\n' +
          'Digite qualquer data/hora em portugu√™s informal!',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // Usar nossa fun√ß√£o para interpretar a data
      const parsedDateTime = parseBrazilianDateTime(userInput);
      
      if (parsedDateTime) {
        // Sucesso - mostrar resultado
        const friendlyFormat = formatBrazilianDateTime(parsedDateTime);
        
        await ctx.reply(
          `‚úÖ *Entendi perfeitamente!*\n\n` +
          `üìù *Voc√™ disse:* "${userInput}"\n\n` +
          `üìÖ *Interpretei como:*\n${friendlyFormat}\n\n` +
          `üïê *Formato ISO:*\n\`${parsedDateTime}\``,
          { parse_mode: 'Markdown' }
        );
      } else {
        // Erro - n√£o conseguiu interpretar
        await ctx.reply(
          `‚ùå *N√£o consegui entender essa data/hora*\n\n` +
          `üìù *Voc√™ disse:* "${userInput}"\n\n` +
          `üí° *Tente algo como:*\n` +
          `‚Ä¢ "amanh√£ √†s 15h"\n` +
          `‚Ä¢ "segunda que vem √†s 9 da manh√£"\n` +
          `‚Ä¢ "sexta √†s sete da noite"\n` +
          `‚Ä¢ "hoje √†s 18:30"`
        );
      }
    } catch (error) {
      console.error('Erro no comando /interpretar:', error);
      await ctx.reply('‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.');
    }
  });

  // Comando /teste - testa v√°rios exemplos
  bot.command('teste', async (ctx: Context) => {
    const exemplos = [
      'amanh√£ √†s 9',
      'quarta √†s sete da noite',
      'sexta que vem √†s 19h',
      'segunda-feira √†s 14:30',
      'hoje √†s 18h',
      'pr√≥xima ter√ßa √†s 10 da manh√£'
    ];

    let resultado = 'üß™ *Teste de Interpreta√ß√£o de Datas*\n\n';

    for (const exemplo of exemplos) {
      const parsed = parseBrazilianDateTime(exemplo);
      if (parsed) {
        const friendly = formatBrazilianDateTime(parsed);
        resultado += `‚úÖ "${exemplo}" ‚Üí ${friendly}\n\n`;
      } else {
        resultado += `‚ùå "${exemplo}" ‚Üí N√£o interpretado\n\n`;
      }
    }

    await ctx.reply(resultado, { parse_mode: 'Markdown' });
  });

  // Listener para qualquer mensagem de texto (opcional)
  bot.on('text', async (ctx: Context) => {
    const message = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
    
    // Ignorar comandos
    if (message.startsWith('/')) return;
    
    // Tentar interpretar automaticamente se parecer uma data/hora
    const temIndicadorTemporal = /\b(amanh√£|amanha|hoje|ontem|segunda|ter√ßa|terca|quarta|quinta|sexta|s√°bado|sabado|domingo|pr√≥xima|proxima|que vem|\d{1,2}h|\d{1,2}:\d{2}|manh√£|manha|tarde|noite)\b/i;
    
    if (temIndicadorTemporal.test(message)) {
      const parsed = parseBrazilianDateTime(message);
      
      if (parsed) {
        const friendly = formatBrazilianDateTime(parsed);
        await ctx.reply(
          `ü§ñ *Detectei uma data/hora na sua mensagem!*\n\n` +
          `üìÖ *Interpretei como:* ${friendly}\n\n` +
          `üí° *Dica:* Use /interpretar para testar outras datas`,
          { parse_mode: 'Markdown' }
        );
      }
    }
  });

  // Comando de ajuda
  bot.command('help', async (ctx: Context) => {
    await ctx.reply(
      'ü§ñ *Bot Interpretador de Datas*\n\n' +
      '*Comandos dispon√≠veis:*\n' +
      '/interpretar [texto] - Interpreta data/hora em portugu√™s\n' +
      '/teste - Testa v√°rios exemplos\n' +
      '/help - Mostra esta ajuda\n\n' +
      '*Exemplos de uso:*\n' +
      '‚Ä¢ /interpretar amanh√£ √†s 15h\n' +
      '‚Ä¢ /interpretar sexta que vem √†s 19h\n' +
      '‚Ä¢ /interpretar quarta √†s sete da noite\n\n' +
      'Ou simplesmente digite uma mensagem com data/hora que eu detectarei automaticamente!',
      { parse_mode: 'Markdown' }
    );
  });

  return bot;
}

/**
 * Fun√ß√£o para iniciar o bot de teste
 */
export async function startDateParserBot(): Promise<void> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN n√£o est√° configurado!');
    return;
  }

  try {
    const bot = createDateParserBot(token);
    
    // Configurar comandos no Telegram
    await bot.telegram.setMyCommands([
      { command: 'interpretar', description: 'Interpretar data/hora em portugu√™s' },
      { command: 'teste', description: 'Testar v√°rios exemplos' },
      { command: 'help', description: 'Mostrar ajuda' }
    ]);
    
    await bot.launch();
    console.log('ü§ñ Bot interpretador de datas iniciado com sucesso!');
    
    // Parar graciosamente
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    
  } catch (error) {
    console.error('‚ùå Erro ao iniciar bot:', error);
  }
}