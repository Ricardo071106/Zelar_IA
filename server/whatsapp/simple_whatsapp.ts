/**
 * Bot WhatsApp Simples - Sem Puppeteer
 * Gera QR codes simulados para demonstra√ß√£o
 */

import { generateQRCodeImage } from '../utils/qrCodeGenerator';
import { parseEventWithClaude } from '../utils/claudeParser';

let isConnected = false;
let qrCodeData = '';
let qrCodeImage = '';
let connectionStatus = 'disconnected';

interface WhatsAppEvent {
  title: string;
  startDate: string;
  description: string;
  displayDate: string;
}

/**
 * Gera dados de QR code WhatsApp no formato correto
 */
function generateWhatsAppQRData(): string {
  const timestamp = Date.now();
  const serverToken = Math.random().toString(36).substring(2, 15);
  const browserToken = Math.random().toString(36).substring(2, 15);
  const secretKey = Math.random().toString(36).substring(2, 20);
  
  // Formato real usado pelo WhatsApp Web
  return `1@${serverToken},${browserToken},${secretKey},${timestamp}`;
}

/**
 * Inicia o bot WhatsApp (vers√£o simulada)
 */
export async function startWhatsAppBot(): Promise<boolean> {
  try {
    console.log('üöÄ Iniciando WhatsApp bot (modo demonstra√ß√£o)...');
    
    // Simular processo de conex√£o
    connectionStatus = 'connecting';
    
    setTimeout(async () => {
      try {
        // Gerar QR code com formato WhatsApp correto
        qrCodeData = generateWhatsAppQRData();
        console.log('üîÑ Gerando QR Code WhatsApp...');
        
        // Gerar imagem do QR code com configura√ß√µes otimizadas
        qrCodeImage = await generateQRCodeImage(qrCodeData);
        console.log('‚úÖ QR Code WhatsApp gerado! Tamanho:', qrCodeImage.length);
        
        connectionStatus = 'qr_code';
        console.log('üì± QR Code WhatsApp pronto para escaneamento!');
        console.log('üì± Acesse /whatsapp para visualizar e conectar');
        
        // Simular timeout do QR code (60 segundos)
        setTimeout(() => {
          if (connectionStatus === 'qr_code' && !isConnected) {
            console.log('‚è∞ QR Code expirou, gerando novo...');
            // Limpar dados antigos antes de gerar novo
            qrCodeData = '';
            qrCodeImage = '';
            connectionStatus = 'connecting';
            setTimeout(() => startWhatsAppBot(), 1000);
          }
        }, 60000);
      } catch (error) {
        console.error('‚ùå Erro ao gerar QR code:', error);
        connectionStatus = 'error';
      }
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao iniciar WhatsApp bot:', error);
    connectionStatus = 'error';
    return false;
  }
}

/**
 * Para o bot WhatsApp
 */
export async function stopWhatsAppBot(): Promise<void> {
  try {
    isConnected = false;
    connectionStatus = 'disconnected';
    qrCodeData = '';
    qrCodeImage = '';
    console.log('üõë WhatsApp bot parado');
  } catch (error) {
    console.error('‚ùå Erro ao parar WhatsApp bot:', error);
  }
}

/**
 * Simula envio de mensagem
 */
export async function sendWhatsAppMessage(phone: string, message: string): Promise<boolean> {
  try {
    if (!isConnected) {
      console.log('üì± Simulando envio para', phone, ':', message);
      return false;
    }
    
    console.log('‚úÖ Mensagem simulada enviada para', phone);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem:', error);
    return false;
  }
}

/**
 * Obt√©m status do WhatsApp
 */
export function getWhatsAppStatus(): any {
  return {
    connected: isConnected,
    status: connectionStatus,
    qrCode: qrCodeData,
    qrCodeImage: qrCodeImage,
    hasQrCode: qrCodeData.length > 0,
    hasQrCodeImage: qrCodeImage.length > 0
  };
}

/**
 * Simula conex√£o bem-sucedida (para demonstra√ß√£o)
 */
export function simulateConnection(): void {
  isConnected = true;
  connectionStatus = 'connected';
  qrCodeData = '';
  qrCodeImage = '';
  console.log('‚úÖ WhatsApp conectado (simula√ß√£o)');
}

/**
 * Processa mensagem recebida (simula√ß√£o)
 */
export async function processMessage(from: string, text: string): Promise<string> {
  try {
    console.log(`üì± Processando mensagem de ${from}: ${text}`);
    
    // Comandos especiais
    if (text.toLowerCase() === '/start' || text.toLowerCase() === '/help') {
      return `ü§ñ *Ol√°! Sou o Zelar*

Seu assistente inteligente de agendamento!

*Como usar:*
üìù Envie mensagens naturais como:
‚Ä¢ "Reuni√£o amanh√£ √†s 14h"
‚Ä¢ "Dentista sexta-feira 9h"
‚Ä¢ "Almo√ßo com Maria domingo 12h"

*Funcionalidades:*
‚úÖ Cria√ß√£o autom√°tica de eventos
üìÖ Links para Google Calendar, Outlook e Apple
ü§ñ Interpreta√ß√£o inteligente de datas em portugu√™s
üì± Integra√ß√£o perfeita com seus calend√°rios

Digite sua mensagem e eu criarei o evento para voc√™!`;
    }

    // Processar como poss√≠vel evento
    if (text.length > 10) {
      const claudeResult = await parseEventWithClaude(text);
      
      if (!claudeResult || !claudeResult.isValid) {
        return 'N√£o consegui entender sua mensagem como um evento. Tente algo como:\n"Reuni√£o amanh√£ √†s 14h"\n"Dentista sexta-feira 9h"';
      }

      // Criar evento
      const event: WhatsAppEvent = {
        title: claudeResult.title,
        startDate: claudeResult.date,
        description: `Evento criado via WhatsApp por ${from}`,
        displayDate: new Date(claudeResult.date).toLocaleString('pt-BR', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })
      };

      // Gerar links do calend√°rio
      const calendarLinks = generateCalendarLinks(event);

      return `‚úÖ *Evento Criado!*

üìÖ *${event.title}*
üóìÔ∏è ${event.displayDate}

*Adicionar ao calend√°rio:*
üì± Google Calendar: ${calendarLinks.google}
üìß Outlook: ${calendarLinks.outlook}
üçé Apple Calendar: ${calendarLinks.apple}

Digite /help para mais comandos.`;
    }

    return 'Ol√°! Sou o Zelar, seu assistente de agendamento.\n\nEnvie uma mensagem como:\n"Reuni√£o amanh√£ √†s 14h"\n"Dentista sexta-feira 9h"\n\nPara mais ajuda, digite /help';
  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    return 'Desculpe, houve um erro ao processar sua mensagem. Tente novamente.';
  }
}

/**
 * Fun√ß√£o auxiliar para gerar links de calend√°rio
 */
function generateCalendarLinks(event: WhatsAppEvent) {
  const startDate = new Date(event.startDate);
  const endDate = new Date(startDate.getTime() + 60 * 60 * 1000); // 1 hora depois
  
  const formatDate = (date: Date) => date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  
  return {
    google: `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${formatDate(startDate)}/${formatDate(endDate)}&details=${encodeURIComponent(event.description)}`,
    outlook: `https://outlook.live.com/calendar/0/deeplink/compose?subject=${encodeURIComponent(event.title)}&startdt=${formatDate(startDate)}&enddt=${formatDate(endDate)}&body=${encodeURIComponent(event.description)}`,
    apple: `data:text/calendar;charset=utf8,BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
DTSTART:${formatDate(startDate)}
DTEND:${formatDate(endDate)}
SUMMARY:${event.title}
DESCRIPTION:${event.description}
END:VEVENT
END:VCALENDAR`
  };
}